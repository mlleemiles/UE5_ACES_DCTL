DEFINE_UI_PARAMS(ExpandGamutEnable, Enable Expand Gamut, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(ExpandGamut, Expand Gamut Amount, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(BlueCorrectionEnable, Enable Blue Correction, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(BlueCorrection, Blue Correction Amount, DCTLUI_SLIDER_FLOAT, 0.6, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(ToneCurveAmount, Tone Curve Amount, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.0, 0.001)

// ACES settings
DEFINE_UI_PARAMS(FilmToneSlope, Film Slope, DCTLUI_SLIDER_FLOAT, 0.88, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(FilmToneToe, Film Toe, DCTLUI_SLIDER_FLOAT, 0.55, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(FilmToneShoulder, Film Shoulder, DCTLUI_SLIDER_FLOAT, 0.26, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(FilmToneBlackClip, Film Black Clip, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(FilmToneWhiteClip, Film White Clip, DCTLUI_SLIDER_FLOAT, 0.04, 0.0, 1.0, 0.001)

__CONSTANT__ float TINY = 1e-10f;

typedef struct {
    float3 c0, c1, c2;
} mat3;

__DEVICE__ mat3 make_mat3( float3 A, float3 B, float3 C) {
    mat3 D;
    D.c0 = A;
    D.c1 = B;
    D.c2 = C;
    return D;
}

__DEVICE__ float3 mul_f3_f33(float3 vec, mat3 mat) 
{
    float3 result;
    result.x = mat.c0.x * vec.x + mat.c0.y * vec.y + mat.c0.z * vec.z;
    result.y = mat.c1.x * vec.x + mat.c1.y * vec.y + mat.c1.z * vec.z;
    result.z = mat.c2.x * vec.x + mat.c2.y * vec.y + mat.c2.z * vec.z;
    return result;
}

__DEVICE__ mat3 mul_f33_f33( mat3 A, mat3 B){
    float r[3][3];
    float a[3][3] =	{{A.c0.x, A.c0.y, A.c0.z}, {A.c1.x, A.c1.y, A.c1.z}, {A.c2.x, A.c2.y, A.c2.z}};
    float b[3][3] =	{{B.c0.x, B.c0.y, B.c0.z}, {B.c1.x, B.c1.y, B.c1.z}, {B.c2.x, B.c2.y, B.c2.z}};
    for( int i = 0; i < 3; ++i){
    for( int j = 0; j < 3; ++j){
    r[i][j] = 0.0f;
    for( int k = 0; k < 3; ++k){
    r[i][j] = r[i][j] + a[i][k] * b[k][j];}}}
    mat3 R = make_mat3(make_float3(r[0][0], r[0][1], r[0][2]), 
    make_float3(r[1][0], r[1][1], r[1][2]), make_float3(r[2][0], r[2][1], r[2][2]));
    return R;
}

__DEVICE__ float dot_f3_f3(float3 x, float3 y) {
    return x.x * y.x + x.y * y.y + x.z * y.z;
}

__DEVICE__ float3 lerp_f3_f3(float3 x, float3 y, float scalor) {
    return x * (1 - scalor) + y * scalor;
}

__DEVICE__ float3 lerp_f3_f3(float3 x, float3 y, float3 scalor) {
    return x + (y - x) * scalor;
}

__DEVICE__ float3 lerp_f_f3(float x, float3 y, float3 scalor) {
    return x + (y - x) * scalor;
}

__DEVICE__ float3 lerp_f_f3(float x, float3 y, float scalor) {
    return make_float3(x, x, x) * (1 - scalor) + y * scalor;
}

__DEVICE__ float min_f3( float3 a) {
    return _fminf( a.x, _fminf( a.y, a.z));
}

__DEVICE__ float max_f3( float3 a) {
    return _fmaxf( a.x, _fmaxf( a.y, a.z));
}

__DEVICE__ float _sign( float x) {
    float y;
    if (x < 0.0f) y = -1.0f;
    else if (x > 0.0f) y = 1.0f;
    else y = 0.0f;
    return y;
}

__DEVICE__ float rgb_2_saturation( float3 rgb) {
    return ( _fmaxf( max_f3(rgb), TINY) - _fmaxf( min_f3(rgb), TINY)) / _fmaxf( max_f3(rgb), 1e-2f);
}

__DEVICE__ float rgb_2_hue( float3 rgb) {
    float hue = 0.0f;
    if (rgb.x == rgb.y && rgb.y == rgb.z) {
    hue = 0.0f;
    } else {
    hue = (180.0f/3.1415926535897932f) * _atan2f( _sqrtf(3.0f) * (rgb.y - rgb.z), 2.0f * rgb.x - rgb.y - rgb.z);
    }
    if (hue < 0.0f) hue = hue + 360.0f;
    return hue;
}

__DEVICE__ float rgb_2_yc( float3 rgb, float ycRadiusWeight) {
    float r = rgb.x;
    float g = rgb.y;
    float b = rgb.z;
    float chroma = _sqrtf(b * (b - g) + g * (g - r) + r * (r - b));
    return ( b + g + r + ycRadiusWeight * chroma) / 3.0f;
}

__DEVICE__ float sigmoid_shaper( float x) {
    float t = _fmaxf( 1.0f - _fabs( x / 2.0f), 0.0f);
    float y = 1.0f + _sign(x) * (1.0f - t * t);
    return y / 2.0f;
}

__DEVICE__ float glow_fwd( float ycIn, float glowGainIn, float glowMid) {
    float glowGainOut;
    if (ycIn <= 2.0f/3.0f * glowMid) {
    glowGainOut = glowGainIn;
    } else if ( ycIn >= 2.0f * glowMid) {
    glowGainOut = 0.0f;
    } else {
    glowGainOut = glowGainIn * (glowMid / ycIn - 1.0f/2.0f);
    }
    return glowGainOut;
}

__DEVICE__ float center_hue( float hue, float centerH) {
    float hueCentered = hue - centerH;
    if (hueCentered < -180.0f) hueCentered = hueCentered + 360.0f;
    else if (hueCentered > 180.0f) hueCentered = hueCentered - 360.0f;
    return hueCentered;
}

__DEVICE__ float3 expf_f3(float3 rgb) {
    return make_float3(_expf( rgb.x ), _expf( rgb.y ), _expf( rgb.z ));
}

__DEVICE__ float cubic_basis_shaper ( float x, float w) {
    float M[4][4] = { {-1.0f/6.0f, 3.0f/6.0f,-3.0f/6.0f, 1.0f/6.0f}, {3.0f/6.0f, -6.0f/6.0f, 3.0f/6.0f, 0.0f/6.0f},
    {-3.0f/6.0f, 0.0f/6.0f, 3.0f/6.0f, 0.0f/6.0f}, {1.0f/6.0f, 4.0f/6.0f, 1.0f/6.0f, 0.0f/6.0f} };
    float knots[5] = { -w/2.0f, -w/4.0f, 0.0f, w/4.0f, w/2.0f };
    float y = 0.0f;
    if ((x > knots[0]) && (x < knots[4])) {
    float knot_coord = (x - knots[0]) * 4.0f/w;
    int j = knot_coord;
    float t = knot_coord - j;
    float monomials[4] = { t*t*t, t*t, t, 1.0f };
    if ( j == 3) {
    y = monomials[0] * M[0][0] + monomials[1] * M[1][0] +
    monomials[2] * M[2][0] + monomials[3] * M[3][0];
    } else if ( j == 2) {
    y = monomials[0] * M[0][1] + monomials[1] * M[1][1] +
    monomials[2] * M[2][1] + monomials[3] * M[3][1];
    } else if ( j == 1) {
    y = monomials[0] * M[0][2] + monomials[1] * M[1][2] +
    monomials[2] * M[2][2] + monomials[3] * M[3][2];
    } else if ( j == 0) {
    y = monomials[0] * M[0][3] + monomials[1] * M[1][3] +
    monomials[2] * M[2][3] + monomials[3] * M[3][3];
    } else {
    y = 0.0f;}}
    return y * 3.0f/2.0f;
}

__DEVICE__ float3 select_f3_lt(float3 A, float3 B, float3 C, float D) {
    
    float3 E;
    if (C.x < D) {
        E.x = A.x;
    } else {
        E.x = B.x;
    }
    if (C.y < D) {
        E.y = A.y;
    } else {
        E.y = B.y;
    }
    if (C.z < D) {
        E.z = A.z;
    } else {
        E.z = B.z;
    }
    return E;
}

__DEVICE__ float3 select_f3_gt(float3 A, float3 B, float3 C, float D) {
    
    float3 E;
    if (C.x > D) {
        E.x = A.x;
    } else {
        E.x = B.x;
    }
    if (C.y > D) {
        E.y = A.y;
    } else {
        E.y = B.y;
    }
    if (C.z > D) {
        E.z = A.z;
    } else {
        E.z = B.z;
    }
    return E;
}

__DEVICE__ float smoothstep(float a, float b, float x) {
    
    float t = _saturatef((x - a)/(b - a));
    return t*t*(3.0 - (2.0*t));
    
}

__DEVICE__ float3 FilmToneMap(float3 LinearColor, float FilmSlope, float FilmToe, float FilmShoulder, float FilmBlackClip, float FilmWhiteClip) {
    
    /*
    const mat3 sRGB_2_AP0 = make_mat3(
        make_float3(0.4397010, 0.3829780, 0.1773350),
        make_float3(0.0897923, 0.8134230, 0.0967616),
        make_float3(0.0175440, 0.1115440, 0.8707040)
    );
    const mat3 sRGB_2_AP1 = make_mat3(
        make_float3(0.61319, 0.33951, 0.04737),
        make_float3(0.07021, 0.91634, 0.01345),
        make_float3(0.02062, 0.10957, 0.86961)
    );
    
    const mat3 AP0_2_sRGB = make_mat3(
        make_float3(2.52169, -1.13413, -0.38756),
        make_float3(-0.27648, 1.37272, -0.09624),
        make_float3(-0.01538, -0.15298, 1.16835)
    );
    const mat3 AP1_2_sRGB = make_mat3(
        make_float3(1.70505, -0.62179, -0.08326),
        make_float3(-0.13026, 1.14080, -0.01055),
        make_float3(-0.02400, -0.12897, 1.15297)
    );
    
    const mat3 AP0_2_AP1 = make_mat3(
        make_float3(1.4514393161, -0.2365107469, -0.2149285693),
        make_float3(-0.0765537734,  1.1762296998, -0.0996759264),
        make_float3(0.0083161484, -0.0060324498,  0.9977163014)
    );
    const mat3 AP1_2_AP0 = make_mat3(
        make_float3(0.6954522414, 0.1406786965, 0.1638690622),
        make_float3(0.0447945634, 0.8596711185, 0.0955343182),
        make_float3(-0.0055258826, 0.0040252103, 1.0015006723)
    );
    */
    const mat3 XYZ_2_AP1_MAT = make_mat3(
        make_float3(1.6410233797, -0.3248032942, -0.2364246952),
        make_float3(-0.6636628587,  1.6153315917,  0.0167563477),
        make_float3(0.0117218943, -0.0082844420,  0.9883948585)
    );
    const mat3 XYZ_2_AP0_MAT = make_mat3(
        make_float3(1.0498110175, 0.0000000000,-0.0000974845),
        make_float3(-0.4959030231, 1.3733130458, 0.0982400361),
        make_float3(0.0000000000, 0.0000000000, 0.9912520182)
    );
    const mat3 XYZ_2_sRGB_MAT = make_mat3(
        make_float3(3.2409699419, -1.5373831776, -0.4986107603),
        make_float3(-0.9692436363,  1.8759675015,  0.0415550574),
        make_float3(0.0556300797, -0.2039769589,  1.0569715142)
    );
    const mat3 sRGB_2_XYZ_MAT = make_mat3(
        make_float3(0.4123907993, 0.3575843394, 0.1804807884),
        make_float3(0.2126390059, 0.7151686788, 0.0721923154),
        make_float3(0.0193308187, 0.1191947798, 0.9505321522)
    );
    const mat3 AP0_2_XYZ_MAT = make_mat3(
        make_float3(0.9525523959, 0.0000000000, 0.0000936786),
        make_float3(0.3439664498, 0.7281660966,-0.0721325464),
        make_float3(0.0000000000, 0.0000000000, 1.0088251844)
    );
    const mat3 AP1_2_XYZ_MAT = make_mat3(
        make_float3(0.6624541811, 0.1340042065, 0.1561876870),
        make_float3(0.2722287168, 0.6740817658, 0.0536895174),
        make_float3(-0.0055746495, 0.0040607335, 1.0103391003)
    );
    const mat3 D65_2_D60_CAT = make_mat3(
        make_float3(1.0130349146, 0.0061052578, -0.0149709436),
        make_float3(0.0076982301, 0.9981633521, -0.0050320385),
        make_float3(-0.0028413174, 0.0046851567,  0.9245061375)
    );
    const mat3 D60_2_D65_CAT = make_mat3(
        make_float3(0.9872240087, -0.0061132286, 0.0159532883),
        make_float3(-0.0075983718,  1.0018614847, 0.0053300358),
        make_float3(0.0030725771, -0.0050959615, 1.0816806031)
    );
    
	const mat3 sRGB_2_AP0 = mul_f33_f33( XYZ_2_AP0_MAT, mul_f33_f33( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );
	const mat3 sRGB_2_AP1 = mul_f33_f33( XYZ_2_AP1_MAT, mul_f33_f33( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );

	const mat3 AP0_2_sRGB = mul_f33_f33( XYZ_2_sRGB_MAT, mul_f33_f33( D60_2_D65_CAT, AP0_2_XYZ_MAT ) );
	const mat3 AP1_2_sRGB = mul_f33_f33( XYZ_2_sRGB_MAT, mul_f33_f33( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );
	
	const mat3 AP0_2_AP1 = mul_f33_f33( XYZ_2_AP1_MAT, AP0_2_XYZ_MAT );
	const mat3 AP1_2_AP0 = mul_f33_f33( XYZ_2_AP0_MAT, AP1_2_XYZ_MAT );
    
    float3 ColorAP1 = LinearColor;
    
    float3 ColorAP0 = mul_f3_f33( ColorAP1, AP1_2_AP0 );
    
    // "Glow" module constants
	const float RRT_GLOW_GAIN = 0.05;
	const float RRT_GLOW_MID = 0.08;

	float saturation = rgb_2_saturation( ColorAP0 );
	float ycIn = rgb_2_yc( ColorAP0, 1.75 );    //UE5 default ycRadiusWeight
	float s = sigmoid_shaper( (saturation - 0.4) / 0.2);
	float addedGlow = 1 + glow_fwd( ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);
	ColorAP0 *= addedGlow;
    
    
	// --- Red modifier --- //
	const float RRT_RED_SCALE = 0.82;
	const float RRT_RED_PIVOT = 0.03;
	const float RRT_RED_HUE = 0;
	const float RRT_RED_WIDTH = 135;
    
	float hue = rgb_2_hue( ColorAP0 );
	float centeredHue = center_hue( hue, RRT_RED_HUE );
	//float hueWeight = cubic_basis_shaper( centeredHue, RRT_RED_WIDTH);
    // use UE's shaper
    float hueWeight = ( smoothstep( 0, 1, 1 - abs( 2 * centeredHue / RRT_RED_WIDTH ) ) );
    hueWeight *= hueWeight;
	
	ColorAP0.x += hueWeight * saturation * (RRT_RED_PIVOT - ColorAP0.x) * (1. - RRT_RED_SCALE);
    
    const mat3 AP0_2_AP1_MAT = make_mat3(
        make_float3(1.4514393161, -0.2365107469, -0.2149285693),
        make_float3(-0.0765537734,  1.1762296998, -0.0996759264),
        make_float3(0.0083161484, -0.0060324498,  0.9977163014)
    );
    // Use ACEScg primaries as working space
	float3 WorkingColor = mul_f3_f33( ColorAP0, AP0_2_AP1_MAT );
    WorkingColor.x = _fmaxf(0, WorkingColor.x);
    WorkingColor.y = _fmaxf(0, WorkingColor.y);
    WorkingColor.z = _fmaxf(0, WorkingColor.z);
    
    const float3 AP1_RGB2Y = make_float3(0.2722287168, 0.6740817658, 0.0536895174);
    
	// Pre desaturate
	WorkingColor = lerp_f_f3( dot_f3_f3( WorkingColor, AP1_RGB2Y ), WorkingColor, 0.96 );
    
	const float ToeScale = 1 + FilmBlackClip - FilmToe;
	const float ShoulderScale = 1 + FilmWhiteClip - FilmShoulder;

	const float InMatch = 0.18;
	const float OutMatch = 0.18;
    
	float ToeMatch;
	if( FilmToe > 0.8 )
	{
		// 0.18 will be on straight segment
		ToeMatch = ( 1 - FilmToe  - OutMatch ) / FilmSlope + _log10f( InMatch );
	}
	else
	{
		// 0.18 will be on toe segment

		// Solve for ToeMatch such that input of InMatch gives output of OutMatch.
		const float bt = ( OutMatch + FilmBlackClip ) / ToeScale - 1;
		ToeMatch = _log10f( InMatch ) - 0.5 * _logf( (1+bt)/(1-bt) ) * (ToeScale / FilmSlope);
	}
    
	float StraightMatch = ( 1 - FilmToe ) / FilmSlope - ToeMatch;
	float ShoulderMatch = FilmShoulder / FilmSlope - StraightMatch;
	
	float3 LogColor = make_float3(_log10f( WorkingColor.x ), _log10f( WorkingColor.y ), _log10f( WorkingColor.z ));
	float3 StraightColor = FilmSlope * ( LogColor + StraightMatch );
    
	float3 ToeColor		= (    -FilmBlackClip ) + (2 *      ToeScale) / ( 1 + expf_f3( (-2 * FilmSlope /      ToeScale) * ( LogColor -      ToeMatch ) ) );
	float3 ShoulderColor	= ( 1 + FilmWhiteClip ) - (2 * ShoulderScale) / ( 1 + expf_f3( ( 2 * FilmSlope / ShoulderScale) * ( LogColor - ShoulderMatch ) ) );
    
	ToeColor		= select_f3_lt(ToeColor, StraightColor, LogColor, ToeMatch);
    ShoulderColor   = select_f3_gt(ShoulderColor, StraightColor, LogColor, ShoulderMatch);
	
    float3 t;
    t.x = _saturatef( ( LogColor.x - ToeMatch ) / ( ShoulderMatch - ToeMatch ) );
    t.y = _saturatef( ( LogColor.y - ToeMatch ) / ( ShoulderMatch - ToeMatch ) );
    t.z = _saturatef( ( LogColor.z - ToeMatch ) / ( ShoulderMatch - ToeMatch ) );
    t = ShoulderMatch < ToeMatch ? 1.0 - t : t;
    //t = select_f3_lt(1 - t, t, make_float3(ShoulderMatch,ShoulderMatch,ShoulderMatch), ToeMatch);
    t = (3-2*t)*t*t;
    float3 ToneColor = lerp_f3_f3( ToeColor, ShoulderColor, t );

    ToneColor = lerp_f_f3( dot_f3_f3( ToneColor, AP1_RGB2Y ), ToneColor, 0.93 );
    ToneColor.x = _fmaxf(0, ToneColor.x);
    ToneColor.y = _fmaxf(0, ToneColor.y);
    ToneColor.z = _fmaxf(0, ToneColor.z);
    
    return ToneColor;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    
    const float3 LinearColor = make_float3(p_R, p_G, p_B);  //Input is AP1
    
    const mat3 XYZ_2_sRGB_MAT = make_mat3(
        make_float3(3.2409699419, -1.5373831776, -0.4986107603),
        make_float3(-0.9692436363,  1.8759675015,  0.0415550574),
        make_float3(0.0556300797, -0.2039769589,  1.0569715142)
    );
    const mat3 D60_2_D65_CAT = make_mat3(
        make_float3(0.9872240087, -0.0061132286, 0.0159532883),
        make_float3(-0.0075983718,  1.0018614847, 0.0053300358),
        make_float3(0.0030725771, -0.0050959615, 1.0816806031)
    );
    const mat3 AP1_2_XYZ_MAT = make_mat3(
        make_float3(0.6624541811, 0.1340042065, 0.1561876870),
        make_float3(0.2722287168, 0.6740817658, 0.0536895174),
        make_float3(-0.0055746495, 0.0040607335, 1.0103391003)
    );
    const mat3 AP1_2_sRGB = mul_f33_f33( XYZ_2_sRGB_MAT, mul_f33_f33( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );
    
    const mat3 Wide_2_XYZ_MAT = make_mat3(
        make_float3(0.5441691,  0.2395926,  0.1666943),
        make_float3(0.2394656,  0.7021530,  0.0583814),
        make_float3(-0.0023439,  0.0361834,  1.0552183)
    );
    
    const mat3 XYZ_2_AP1_MAT = make_mat3(
        make_float3(1.6410233797, -0.3248032942, -0.2364246952),
        make_float3(-0.6636628587,  1.6153315917,  0.0167563477),
        make_float3(0.0117218943, -0.0082844420,  0.9883948585)
    );
    const mat3 XYZ_2_AP0_MAT = make_mat3(
        make_float3(1.0498110175, 0.0000000000,-0.0000974845),
        make_float3(-0.4959030231, 1.3733130458, 0.0982400361),
        make_float3(0.0000000000, 0.0000000000, 0.9912520182)
    );
    const mat3 AP0_2_XYZ_MAT = make_mat3(
        make_float3(0.9525523959, 0.0000000000, 0.0000936786),
        make_float3(0.3439664498, 0.7281660966,-0.0721325464),
        make_float3(0.0000000000, 0.0000000000, 1.0088251844)
    );
    const mat3 AP0_2_AP1 = mul_f33_f33( XYZ_2_AP1_MAT, AP0_2_XYZ_MAT );
    const mat3 AP1_2_AP0 = mul_f33_f33( XYZ_2_AP0_MAT, AP1_2_XYZ_MAT );
    
    const mat3 Wide_2_AP1 = mul_f33_f33( XYZ_2_AP1_MAT, Wide_2_XYZ_MAT );
    const mat3 ExpandMat = mul_f33_f33( Wide_2_AP1, AP1_2_sRGB );
    
    const float3 AP1_RGB2Y = make_float3(0.2722287168, 0.6740817658, 0.0536895174);
    
    float3 ColorAP1 = LinearColor;//mul_f3_f33(LinearColor, sRGB_2_AP1);
    
    float LumaAP1 = dot_f3_f3( ColorAP1, AP1_RGB2Y );
    float3 ChromaAP1 = ColorAP1 / LumaAP1;
    
	float ChromaDistSqr = dot_f3_f3( ChromaAP1 - 1, ChromaAP1 - 1 );
	float ExpandAmount = ( 1 - _exp2f( -4 * ChromaDistSqr ) ) * ( 1 - _exp2f( -4 * ExpandGamut * ExpandGamutEnable * LumaAP1*LumaAP1 ) );

    float3 ColorExpand = mul_f3_f33( ColorAP1, ExpandMat);
    ColorAP1 = lerp_f3_f3(ColorAP1, ColorExpand, ExpandAmount);
    
    const mat3 BlueCorrect = make_mat3(
        make_float3(0.9404372683, -0.0183068787, 0.0778696104),
        make_float3(0.0083786969,  0.8286599939, 0.1629613092),
        make_float3(0.0005471261, -0.0008833746, 1.0003362486)
    );
    const mat3 BlueCorrectInv = make_mat3(
        make_float3(1.06318,     0.0233956, -0.0865726),
        make_float3(-0.0106337,   1.20632,   -0.19569),
        make_float3(-0.000590887, 0.00105248, 0.999538)
    );
    const mat3 BlueCorrectAP1 = mul_f33_f33( AP0_2_AP1, mul_f33_f33( BlueCorrect,    AP1_2_AP0 ) );
    const mat3 BlueCorrectInvAP1 = mul_f33_f33( AP0_2_AP1, mul_f33_f33( BlueCorrectInv, AP1_2_AP0 ) );
    
    ColorAP1 = lerp_f3_f3( ColorAP1, mul_f3_f33( ColorAP1, BlueCorrectAP1 ), BlueCorrection * BlueCorrectionEnable );
    
    float3 ToneMappedColorAP1 = FilmToneMap( ColorAP1, FilmToneSlope, FilmToneToe, FilmToneShoulder, FilmToneBlackClip, FilmToneWhiteClip );
    ColorAP1 = lerp_f3_f3(ColorAP1, ToneMappedColorAP1, ToneCurveAmount);
    
    ColorAP1 = lerp_f3_f3( ColorAP1, mul_f3_f33( ColorAP1, BlueCorrectInvAP1 ), BlueCorrection * BlueCorrectionEnable );

    return ColorAP1;
}